import cv2
import numpy as np

def compute_homography_dlt(src_pts, dst_pts):
    A = []
    for i in range(4):
        x, y = src_pts[i][0], src_pts[i][1]
        u, v = dst_pts[i][0], dst_pts[i][1]
        A.append([-x, -y, -1,  0,  0, 0, x*u, y*u, u])
        A.append([ 0,  0,  0, -x, -y, -1, x*v, y*v, v])
    
    A = np.array(A)
    _, _, Vt = np.linalg.svd(A)
    H = Vt[-1].reshape(3, 3)
    return H / H[2, 2]  # Normalize

# Load an image
image = cv2.imread("C:\\Users\\SAIL\\Pictures\\i1.PNG")  # Replace with your image

# Define 4 source and destination points
src_pts = np.float32([[100, 100], [400, 100], [100, 400], [400, 400]])
dst_pts = np.float32([[0, 0], [300, 0], [0, 300], [300, 300]])

# Compute homography using DLT
H = compute_homography_dlt(src_pts, dst_pts)

# Apply transformation
warped = cv2.warpPerspective(image, H, (300, 300))

# Show original and warped image
cv2.imshow("Original", image)
cv2.imshow("DLT Warp", warped)
cv2.waitKey(0)
cv2.destroyAllWindows()
